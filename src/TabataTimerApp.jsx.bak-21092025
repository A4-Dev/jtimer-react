import { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  Container,
  Grid,
  TextField,
  Button,
  Card,
  CardContent,
  Tabs,
  Tab,
  LinearProgress,
  Switch,
  FormControlLabel
} from '@mui/material';
import { blue, green, grey, orange, red } from '@mui/material/colors';
import { Howl } from 'howler';
import { motion, AnimatePresence } from 'framer-motion';

const sounds = {
  start: new Howl({ src: ['/sounds/start.mp3'] }),
  halfway: new Howl({ src: ['/sounds/halfway.mp3'] }),
  thirty: new Howl({ src: ['/sounds/30sec.mp3'] }),
  twenty: new Howl({ src: ['/sounds/20sec.mp3'] }),
  countdown: new Howl({ src: ['/sounds/countdown.mp3'] }),
  threetwoone: new Howl({ src: ['/sounds/threetwoone.mp3'] }),
  beeprest: new Howl({ src: ['/sounds/beeprest.mp3'] }),
  beepwork: new Howl({ src: ['/sounds/beepwork.mp3'] }),
  complete: new Howl({ src: ['/sounds/ahooga-horn.mp3'] }),
  getready: new Howl({ src: ['/sounds/getready.mp3'] }),
  halfwayfourtogo: new Howl({ src: ['/sounds/halfwayfourtogo.mp3'] }),
  halfwaytwotogo: new Howl({ src: ['/sounds/halfwaytwotogo.mp3'] }),
  last10: new Howl({ src: ['/sounds/last10.mp3'] }),
  restfinalround: new Howl({ src: ['/sounds/restfinalround.mp3'] }),
  rest: new Howl({ src: ['/sounds/rest.mp3'] }),
  round1: new Howl({ src: ['/sounds/round1.mp3'] }),
  round10: new Howl({ src: ['/sounds/round10.mp3'] }),
  round11: new Howl({ src: ['/sounds/round11.mp3'] }),
  round12: new Howl({ src: ['/sounds/round12.mp3'] }),
  round2: new Howl({ src: ['/sounds/round2.mp3'] }),
  round3: new Howl({ src: ['/sounds/round3.mp3'] }),
  round4: new Howl({ src: ['/sounds/round4.mp3'] }),
  round5: new Howl({ src: ['/sounds/round5.mp3'] }),
  round6: new Howl({ src: ['/sounds/round6.mp3'] }),
  round7: new Howl({ src: ['/sounds/round7.mp3'] }),
  round8: new Howl({ src: ['/sounds/round8.mp3'] }),
  round9: new Howl({ src: ['/sounds/round9.mp3'] }),
  statuschange: new Howl({ src: ['/sounds/statuschange.mp3'] }),
  continuing: new Howl({ src: ['/sounds/timercontinuing.mp3'] }),
  timerpaused: new Howl({ src: ['/sounds/timerpaused.mp3'] }),
  timerreset: new Howl({ src: ['/sounds/timerreset.mp3'] }),
};

const defaultTimers = [
  { name: 'Tabata', work: 20, rest: 10, rounds: 8 },
  { name: 'Half Tabata', work: 20, rest: 10, rounds: 4 },
  { name: '3 x 60', work: 60, rest: 5, rounds: 3 },
  { name: '3 x 90', work: 90, rest: 5, rounds: 3 },
  { name: '3 x 180', work: 90, rest: 5, rounds: 3 },
  { name: '6 x 60', work: 60, rest: 10, rounds: 6 },
  { name: '1 minute', work: 60, rest: 0, rounds: 1 },
  { name: '2 minutes', work: 120, rest: 0, rounds: 1 },
];

function formatTime(sec) {
  const m = Math.floor(sec / 60).toString().padStart(2, '0');
  const s = (sec % 60).toString().padStart(2, '0');
  return `${m}:${s}`;
}

export default function TabataTimerApp({ darkMode, setDarkMode }) {
  const [timers, setTimers] = useState(defaultTimers);
  const [activeTimer, setActiveTimer] = useState(null);
  const [currentRound, setCurrentRound] = useState(1);
  const [isRunning, setIsRunning] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [isWork, setIsWork] = useState(true);
  const [timeLeft, setTimeLeft] = useState(0);
  const [isGettingReady, setIsGettingReady] = useState(false);
  const [hasStarted, setHasStarted] = useState(false);

  const isComplete =
    hasStarted &&
    !isRunning &&
    !isGettingReady &&
    !isPaused &&
    activeTimer &&
    currentRound === activeTimer.rounds &&
    !isWork;

  const progressPercent = activeTimer
    ? ((isWork ? timeLeft : activeTimer.rest - timeLeft) /
        (isWork ? activeTimer.work : activeTimer.rest)) * 100
    : 0;

  // Choose a real color value for the page background
  const getBgColorValue = () => {
    if (!hasStarted) return '#ffffff';
    if (isGettingReady) return grey[700];
    if (isPaused) return orange[400];
    if (!isRunning && isComplete) return blue[700];
    if (isWork) return green[800];
    if (!activeTimer) return '#ffffff';
    return red[800];
  };

  // Main timer / phase logic
  useEffect(() => {
    if (!activeTimer || !isRunning || isPaused) return;

    if (timeLeft === 0) {
      if (isGettingReady) {
        setIsGettingReady(false);
        setIsWork(true);
        setTimeLeft(activeTimer.work);
        sounds.start.play();
        return;
      }

      if (isWork) {
        if (currentRound === activeTimer.rounds) {
          setIsWork(false);
          setIsRunning(false);
          sounds.complete?.play();
        } else {
          setIsWork(false);
          setTimeLeft(activeTimer.rest);
        }
      } else {
        if (currentRound < activeTimer.rounds) {
          setIsWork(true);
          setCurrentRound((r) => r + 1);
          setTimeLeft(activeTimer.work);
        } else {
          setIsRunning(false);
        }
      }
      return;
    }

    // Mid-interval cues
    if (
      isWork &&
      activeTimer.work >= 20 &&
      activeTimer.work % 2 === 0 &&
      timeLeft === activeTimer.work / 2 &&
      timeLeft !== 30
    ) {
      sounds.halfway.play();
    }

    if (timeLeft === 30) {
      sounds.thirty.play();
    }

    if (timeLeft === 20 && activeTimer.name !== 'Tabata' && activeTimer.name !== 'Half Tabata') {
      sounds.twenty.play();
    }

    if (timeLeft === 10 && activeTimer.name !== 'Tabata' && activeTimer.name !== 'Half Tabata' && !isGettingReady) {
      sounds.last10.play();
    }

    if (timeLeft === 3) sounds.threetwoone.play();

    if (timeLeft === activeTimer.work && isWork) sounds.beepwork.play();

    if (timeLeft === activeTimer.rest && !isWork && !isGettingReady) {
      sounds.beeprest.play();
      sounds.rest.play();
    }

    if (isWork && timeLeft === activeTimer.work) {
      const roundSound = sounds[`round${currentRound}`];
      roundSound?.play();
    }

    const timer = setTimeout(() => setTimeLeft((t) => t - 1), 1000);
    return () => clearTimeout(timer);
  }, [
    timeLeft,
    isRunning,
    isPaused,
    activeTimer,
    isGettingReady,
    isWork,
    currentRound,
  ]);

  const startTimer = () => {
    setHasStarted(true);
    if (!activeTimer) return;
    setIsGettingReady(true);
    setIsRunning(true);
    setIsPaused(false);
    setCurrentRound(1);
    setIsWork(false);
    setTimeLeft(10);
    sounds.getready.play();
  };

  const pauseResumeTimer = () => {
    setIsPaused((prev) => {
      const newState = !prev;
      newState ? sounds.timerpaused.play() : sounds.continuing.play();
      return newState;
    });
  };

  const resetTimer = () => {
    setHasStarted(false);
    if (!activeTimer) return;
    setIsRunning(false);
    setIsPaused(false);
    setCurrentRound(1);
    setIsWork(true);
    setIsGettingReady(false);
    setTimeLeft(activeTimer.work);
    sounds.timerreset.play();
  };

  const addTimer = (e) => {
    e.preventDefault();
    const form = e.target;
    const name = form.name.value;
    const work = parseInt(form.work.value);
    const rest = parseInt(form.rest.value);
    const rounds = parseInt(form.rounds.value);
    const newTimer = { name, work, rest, rounds };

    setTimers((t) => [...t, newTimer]);
    setActiveTimer(newTimer);
    setTimeLeft(work);
    setCurrentRound(1);
    setIsWork(true);
    setIsRunning(false);
    setIsPaused(false);

    form.reset();
  };

  return (
    <Box
      sx={{
        display: 'flex',
        flexDirection: 'column',
        minHeight: '100vh',
        bgcolor: getBgColorValue(), // <- dynamic background color here
        color: 'text.primary',
      }}
    >
      <Container maxWidth={false} sx={{ py: 4, width: '100%', flexGrow: 1 }}>
        {/* Header */}
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography
            variant="h4"
            align="center"
            gutterBottom
            sx={{ flexGrow: 1, textAlign: 'center', color: 'primary.main', whiteSpace: 'pre-line' }}
          >
            {activeTimer ? `Selected timer:\n${activeTimer.name}` : 'Combat Cardio Timers - JABOOG'}
          </Typography>
          <FormControlLabel
            control={<Switch checked={darkMode} onChange={() => setDarkMode(!darkMode)} />}
            label="Dark Mode"
          />
        </Box>

        {!activeTimer ? (
          <>
            {/* Presets */}
            <Box sx={{ my: 4 }}>
              <Typography variant="h5" gutterBottom>Select a Preset Timer</Typography>
              <Tabs
                value={false}
                onChange={(_, newValue) => {
                  const timer = timers.find((t) => t.name === newValue);
                  if (timer) {
                    setActiveTimer(timer);
                    setTimeLeft(timer.work);
                    setCurrentRound(1);
                    setIsWork(false);
                    setIsRunning(false);
                    setIsPaused(false);
                  }
                }}
                variant="scrollable"
                scrollButtons="auto"
                allowScrollButtonsMobile
              >
                {timers.map((timer) => (
                  <Tab key={timer.name} label={timer.name} value={timer.name} />
                ))}
              </Tabs>
            </Box>

            {/* Custom Timer */}
            <Box component="form" onSubmit={addTimer} sx={{ mt: 4 }}>
              <Typography variant="h6" gutterBottom>Add a Custom Timer</Typography>
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <TextField name="name" label="Timer Name" fullWidth required disabled={isRunning} />
                </Grid>
                <Grid item xs={4}>
                  <TextField name="work" label="Work (sec)" type="number" fullWidth required disabled={isRunning} />
                </Grid>
                <Grid item xs={4}>
                  <TextField name="rest" label="Rest (sec)" type="number" fullWidth required disabled={isRunning} />
                </Grid>
                <Grid item xs={4}>
                  <TextField name="rounds" label="Rounds" type="number" fullWidth required disabled={isRunning} />
                </Grid>
                <Grid item xs={12}>
                  <Button variant="contained" type="submit" disabled={isRunning}>Add Timer</Button>
                </Grid>
              </Grid>
            </Box>
          </>
        ) : (
          <>
            {/* Progress Bar */}
            <Box sx={{ mt: 2 }}>
              <LinearProgress
                variant="determinate"
                value={progressPercent}
                sx={{ height: 10, borderRadius: 5 }}
              />
            </Box>

            {/* Timer Display */}
            <Box sx={{ mt: 3, width: '100%' }}>
              <Grid
                container
                spacing={3}
                justifyContent="space-between"
                alignItems="stretch"
                sx={{ width: '100%', margin: 0 }}
              >
                {/* Round Card */}
                <Grid item xs={12} sm={6} md={6} lg={6} sx={{ display: 'flex', flex: 1 }}>
                  <Card sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
                    <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
                      <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
                        <Typography variant="h5" align="center">Round</Typography>
                        <Typography
                          variant="h1"
                          sx={{
                            textAlign: 'center',
                            fontSize: { xs: '14vw', sm: '10vw', md: '8vw', lg: '6vw' },
                            mt: 2,
                            color: 'text.primary',
                          }}
                        >
                          {currentRound} / {activeTimer.rounds}
                        </Typography>
                      </Box>
                      {(isPaused || isComplete || !isRunning) && (
                        <Box mt={4}>
                          <Button
                            fullWidth
                            variant="outlined"
                            color="secondary"
                            onClick={() => {
                              sounds.beeprest.play();
                              setHasStarted(false);
                              setActiveTimer(null);
                            }}
                            sx={{
                              fontSize: { xs: '0.8rem', sm: '1rem', md: '1.2rem' },
                              py: 2
                            }}
                          >
                            BACK TO TIMER SELECTION
                          </Button>
                        </Box>
                      )}
                    </CardContent>
                  </Card>
                </Grid>

                {/* Count Card */}
                <Grid item xs={12} sm={6} md={6} lg={6} sx={{ display: 'flex', flex: 1 }}>
                  <Card sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
                    <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'space-between' }}>
                      <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center' }}>
                        <Typography variant="h5" align="center">Count</Typography>
                        <AnimatePresence mode="wait">
                          <motion.div
                            key={timeLeft}
                            initial={{ opacity: 0, scale: 0.8 }}
                            animate={{ opacity: 1, scale: 1 }}
                            exit={{ opacity: 0, scale: 0.8 }}
                            transition={{ duration: 0.3 }}
                          >
                            <Typography
                              variant="h1"
                              sx={{
                                textAlign: 'center',
                                fontSize: { xs: '14vw', sm: '10vw', md: '8vw', lg: '6vw' },
                                mt: 2,
                                color: 'text.primary',
                              }}
                            >
                              {formatTime(timeLeft)}
                            </Typography>
                          </motion.div>
                        </AnimatePresence>
                      </Box>
                      <Box mt={4} display="flex" justifyContent="center" gap={2}>
                        {!isRunning && !isComplete && (
                          <Button variant="contained" color="success" onClick={startTimer}>
                            START
                          </Button>
                        )}
                        {isRunning && (
                          <Button variant="contained" color="primary" onClick={pauseResumeTimer}>
                            {isPaused ? 'RESUME' : 'PAUSE'}
                          </Button>
                        )}
                        {(isPaused || isComplete) && (
                          <Button variant="contained" color="warning" onClick={resetTimer}>
                            RESET
                          </Button>
                        )}
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              </Grid>
            </Box>
          </>
        )}
      </Container>
    </Box>
  );
}
